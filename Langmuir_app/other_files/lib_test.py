import time

# inval 10000000 -> val -6777216

# inval                  0b100110001001011010000000       10000000
# val                   -0b 11001110110100110000000      -6777216
# bin(0x800000) =        0b100000000000000000000000
# bin(0x7fffff) =        0b011111111111111111111111
# inval & 0x800000 =     0b100000000000000000000000       8388608
# -(inval & 0x800000) = -0b100000000000000000000000      -8388608
# inval & 0x7fffff =     0b   110001001011010000000       1611392

# rval                   0b 11001110110100110000000       6777216


inval = 13941655
outval = -(inval & 0x800000) + (inval & 0x7fffff)  # current procedure

tval = 13963847
tval1 = 16777215
tval2 = 13966990

tvals = [13958378, 6980895, 13962473]

for each in tvals:
    #rval = (each & 0x800000) + (each & 0x7fffff)  # reverse procedure
    #print(rval)
    print(bin(each))

print("")


tval = -2795379
tval1 = -3495035
tval2 = -2796739

for each in [tval, tval1, tval2]:
    rval = (each & 0x800000) + (each & 0x7fffff)  # reverse procedure
    #print(rval)
    print(bin(rval))

#rval = (tval & 0x800000) + (tval & 0x7fffff)  # reverse procedure

#print(rval)
#print(bin(rval))
#print(outval)
#print(bin(outval))

byteValue = 0
bin_list = [1,1,0,1,0,1,0,0]
for x in range(8):
    byteValue <<= 1
    byteValue |= bin_list[x]

print(byteValue)
print(bin(byteValue))

"""
0b11010100 10111011 10010111
0b01101010 01011011 11101110  # shifted right, grabbed a 0 before data
0b11010100 10111100 11110100

0b11010100 10111011 11101100
0b11101010 01011101 01011101  # shifted right, grabbed a 1 before data
0b11010100 10111000 00011000

0b11010100 01111100 00111110
0b11101010 00111111 01111011  # shifted right, grabbed a 1 before data
0b11010100 10000111 11001010

0b         110101001110101111011001
0b11111111 1101010100000101             # lost an entire byte
0b         110101010001000111011101


# after full binary mod
0b110101100011000010101110
0b110111111111111111111111
0b110101100010100101111101

0b 110101011010011000011001
0b111010101100111011010001
0b 110101011001010011011100

0b 110101010110000100011010
0b111010101010101110100010
0b 110101010101011110111000


0b 110101010110000100011010
0b111010101010101110100010
0b111010101100111011010001
0b 110101010101011110111000

0b11010 1010011110001001010
0b110100101001111100010001     # maybe a double counted 0
0b11010 1010011110010000100

0b110101011101011010110000
0b111111111111111111 10 1101
0b     101110001111000101111111
0b110101011011101100011100

0b11010 1011010101001001011
0b110100101101010110111001    # maybe double read a 0
0b11010 1011011000101000000

0b110101011011000001111001
0b011010101101100000101010  # read a 0 as the first bit
0b110101011010111111000001

0b110101010000100100111100
0b011010101000011000010011  # read a 0 as the first bit
0b110101010000111100101110

0b110101001111111010001110
0b011010100111000111111100  # read a 0 as the first bit
0b110101001100101011010100
0b1
0b11010 1010101111001000001
0b110100101010111001101100    # maybe double read a 0
0b11010 1010101101110101100
0b1
0b110101001110100001000110
0b011010100111110111011110  # read a 0 as the first bit
0b110101010000000001100011

# switched load cell
0b110101001111110011101010
0b011010101000010100011111 # read a 0 as the first bit
0b110101010000110011101001

   110101001111111111111111 = 13959167
   110101000000000000000000 = 13893632
"""



tm = 0.0000001

print('Going to sleep for', str(tm))
# Start timer

start_time = time.time()
time.sleep(tm)
# End timer
end_time = time.time()

print('Woke up after', str(end_time - start_time), 'seconds')
